// Generated by CoffeeScript 1.10.0
(function() {
  /** @jsx React.DOM */;
  this.PeopleSection = React.createClass({
    displayName: 'PeopleSection',
    getInitialState: function() {
      return {
        didFetchData: false,
        people: [],
        meta: {
          total_pages: 0,
          current_page: 1,
          total_count: 0
        },
        fetchData: {
          search: '',
          page: 1
        }
      };
    },
    componentDidMount: function() {
      this._subscribeToEvents();
      return this._fetchPeople({});
    },
    componentWillUnmount: function() {
      return this._unsubscribeFromEvents();
    },
    _subscribeToEvents: function() {
      return PubSub.subscribe('resetButton:onClick', (function(_this) {
        return function() {
          _this.state.fetchData = {
            search: '',
            page: 1
          };
          return _this._fetchPeople();
        };
      })(this));
    },
    _unsubscribeFromEvents: function() {
      return PubSub.unsubscribe('resetButton:onClick');
    },
    _fetchPeople: function() {
      return $.ajax({
        url: Routes.people_path(),
        dataType: 'json',
        data: this.state.fetchData
      }).done(this._fetchDataDone).fail(this._fetchDataFail);
    },
    _fetchDataDone: function(data, textStatus, jqXHR) {
      if (!this.isMounted()) {
        return false;
      }
      return this.setState({
        didFetchData: true,
        people: data.people,
        meta: data.meta
      });
    },
    _fetchDataFail: (function(_this) {
      return function(xhr, status, err) {
        return console.error(_this.props.url, status, err.toString());
      };
    })(this),
    _handleOnSearchSubmit: function(search) {
      this.state.fetchData = {
        search: search,
        page: 1
      };
      return this._fetchPeople();
    },
    _handleOnPaginate: function(pageNumber) {
      this.state.fetchData.page = pageNumber;
      return this._fetchPeople();
    },
    render: function() {
      var cardsNode, noDataNode;
      cardsNode = this.state.people.map(function(person) {
        return React.createElement(PersonCard, {
          "key": person.id,
          "data": person
        });
      });
      noDataNode = React.createElement("div", {
        "className": "warning"
      }, React.createElement("span", {
        "className": "fa-stack"
      }, React.createElement("i", {
        "className": "fa fa-meh-o fa-stack-2x"
      })), React.createElement("h4", null, "No people found..."), React.createElement(ResetButton, {
        "text": "Reset filter",
        "styleClass": "btn"
      }));
      return React.createElement("div", null, React.createElement(PeopleSearch, {
        "totalCount": this.state.meta.total_count,
        "onFormSubmit": this._handleOnSearchSubmit
      }), React.createElement(PaginatorSection, {
        "totalPages": this.state.meta.total_pages,
        "currentPage": this.state.meta.current_page,
        "onPaginate": this._handleOnPaginate
      }), React.createElement("div", {
        "className": "cards-wrapper"
      }, (this.state.people.length > 0 ? (
        cardsNode
      ) : this.state.didFetchData ? (
        noDataNode
      ) : void 0)), React.createElement(PaginatorSection, {
        "totalPages": this.state.meta.total_pages,
        "currentPage": this.state.meta.current_page,
        "onPaginate": this._handleOnPaginate
      }));
    }
  });

}).call(this);
